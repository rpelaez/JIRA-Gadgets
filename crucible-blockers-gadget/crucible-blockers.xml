<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="Crucible Blockers"
            description="**Highly experimental, and hardcoded to STRM right now.** Creates a list of the users with the most open reviews to review.  Blockers count double."
            author="Zach Davis"
            author_email="zdavis@atlassian.com">
        <Optional feature="gadget-directory">
            <Param name="categories">
                Other
                Wallboard
        </Param>
        </Optional>
        <Optional feature="atlassian.util" />
        <Optional feature="auth-refresh" />
        <Require feature="views" />
        <Require feature="setprefs" />
        <Require feature="dynamic-height"/>
        <Require feature="oauthpopup" />
    </ModulePrefs>
    
    <!-- Show configuration screen when gadget is first added -->
    <UserPref name="isConfigured" datatype="hidden" default_value="false" />
    <UserPref name="project" datatype="hidden" />
    <UserPref name="refresh" datatype="hidden" default_value="15" />
        
    <Content type="html">
        <![CDATA[            
                <style type="text/css">
                      body {
                          background: #fff;
                          color: #000;
                          font: 12px/1.4 arial,helvetica,lucida,sans-serif;
                          padding: 0;
                          margin: 0;
                      }

                      .wallboard {
                          background: #000;
                          color: #fff;
            /*              cursor: none;*/
                          -webkit-font-smoothing: antialiased;
                      }

                      .wallboard a {
                          color: #fff;
                          text-decoration: none;
                      }

                      .wallboard .footer {
                          display: none;
                      }

                      .view {
                          padding: .5em 1em;
                      }

                      .users-container {

                      }

                      .user {
                          clear: both;
                          margin-bottom: 1em;
                          padding-left: 75px;
                      }

                      .wallboard .user {
                          min-height: 100px;
                          padding-left: 120px;
                      }

                      .user-avatar {
                          display: inline;
                          float: left;
                          margin-left: -65px;
                      }

                      .wallboard .user-avatar {
                          margin-left: -115px;
                      }

                      h2.user-name {
                          color: #369;
                          font-size: 140%;
                          margin-bottom: 0.2em;
                      }

                      .wallboard h2.user-name {
                          color: #fff;
                          font-size: 215% !important;
                          margin-bottom: 0.4em;
                      }

                      .user-info {
                          font-size: 110%;
                      }

                      .wallboard .user-info {
                          font-size: 130%;
                      }

                      .user-info span {
                          display: block;
                          margin-right: 15px;
                      }

                      .wallboard .user-info span {

                      }

                      .reviews-incomplete {
                          color: #EF9D0E;
                      }

                      .wallboard .reviews-incomplete {
                          color: #FFE900;
                      }

                      .reviews-blocking {
                          color: red;
                      }

                      .zero-count {
                          color: #888;
                          opacity: 0.5;
                      }

                      .wallboard .zero-count {

                      }
                      
                      .no-matching-users {
                            background: url("https://studio.atlassian.com/wiki/download/attachments/40501391/Arnold-Predator.jpg") no-repeat left top transparent !important;
                            font-size: 330%;
                            height: 100%;
                            padding-left: 3%;
                            padding-right: 47%;
                            width: 40%;
                      }
                  </style>
                  <script type="text/javascript" src="http://code.jquery.com/jquery-1.5.1.min.js"></script>
                  <script type="text/javascript">
                    (function() {
                        this.console = this.console || {
                            log: function() {}
                        };

                        /**
                        *
                        *  MD5 (Message-Digest Algorithm)
                        *  http://www.webtoolkit.info/
                        *
                        **/

                        var MD5 = function (string) {

                        	function RotateLeft(lValue, iShiftBits) {
                        		return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
                        	}

                        	function AddUnsigned(lX,lY) {
                        		var lX4,lY4,lX8,lY8,lResult;
                        		lX8 = (lX & 0x80000000);
                        		lY8 = (lY & 0x80000000);
                        		lX4 = (lX & 0x40000000);
                        		lY4 = (lY & 0x40000000);
                        		lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
                        		if (lX4 & lY4) {
                        			return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
                        		}
                        		if (lX4 | lY4) {
                        			if (lResult & 0x40000000) {
                        				return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                        			} else {
                        				return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                        			}
                        		} else {
                        			return (lResult ^ lX8 ^ lY8);
                        		}
                         	}

                         	function F(x,y,z) { return (x & y) | ((~x) & z); }
                         	function G(x,y,z) { return (x & z) | (y & (~z)); }
                         	function H(x,y,z) { return (x ^ y ^ z); }
                        	function I(x,y,z) { return (y ^ (x | (~z))); }

                        	function FF(a,b,c,d,x,s,ac) {
                        		a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
                        		return AddUnsigned(RotateLeft(a, s), b);
                        	};

                        	function GG(a,b,c,d,x,s,ac) {
                        		a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
                        		return AddUnsigned(RotateLeft(a, s), b);
                        	};

                        	function HH(a,b,c,d,x,s,ac) {
                        		a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
                        		return AddUnsigned(RotateLeft(a, s), b);
                        	};

                        	function II(a,b,c,d,x,s,ac) {
                        		a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
                        		return AddUnsigned(RotateLeft(a, s), b);
                        	};

                        	function ConvertToWordArray(string) {
                        		var lWordCount;
                        		var lMessageLength = string.length;
                        		var lNumberOfWords_temp1=lMessageLength + 8;
                        		var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
                        		var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
                        		var lWordArray=Array(lNumberOfWords-1);
                        		var lBytePosition = 0;
                        		var lByteCount = 0;
                        		while ( lByteCount < lMessageLength ) {
                        			lWordCount = (lByteCount-(lByteCount % 4))/4;
                        			lBytePosition = (lByteCount % 4)*8;
                        			lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
                        			lByteCount++;
                        		}
                        		lWordCount = (lByteCount-(lByteCount % 4))/4;
                        		lBytePosition = (lByteCount % 4)*8;
                        		lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
                        		lWordArray[lNumberOfWords-2] = lMessageLength<<3;
                        		lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
                        		return lWordArray;
                        	};

                        	function WordToHex(lValue) {
                        		var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
                        		for (lCount = 0;lCount<=3;lCount++) {
                        			lByte = (lValue>>>(lCount*8)) & 255;
                        			WordToHexValue_temp = "0" + lByte.toString(16);
                        			WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
                        		}
                        		return WordToHexValue;
                        	};

                        	function Utf8Encode(string) {
                        		string = string.replace(/\r\n/g,"\n");
                        		var utftext = "";

                        		for (var n = 0; n < string.length; n++) {

                        			var c = string.charCodeAt(n);

                        			if (c < 128) {
                        				utftext += String.fromCharCode(c);
                        			}
                        			else if((c > 127) && (c < 2048)) {
                        				utftext += String.fromCharCode((c >> 6) | 192);
                        				utftext += String.fromCharCode((c & 63) | 128);
                        			}
                        			else {
                        				utftext += String.fromCharCode((c >> 12) | 224);
                        				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        				utftext += String.fromCharCode((c & 63) | 128);
                        			}

                        		}

                        		return utftext;
                        	};

                        	var x=Array();
                        	var k,AA,BB,CC,DD,a,b,c,d;
                        	var S11=7, S12=12, S13=17, S14=22;
                        	var S21=5, S22=9 , S23=14, S24=20;
                        	var S31=4, S32=11, S33=16, S34=23;
                        	var S41=6, S42=10, S43=15, S44=21;

                        	string = Utf8Encode(string);

                        	x = ConvertToWordArray(string);

                        	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

                        	for (k=0;k<x.length;k+=16) {
                        		AA=a; BB=b; CC=c; DD=d;
                        		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
                        		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
                        		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
                        		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
                        		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
                        		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
                        		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
                        		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
                        		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
                        		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
                        		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
                        		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
                        		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
                        		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
                        		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
                        		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
                        		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
                        		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
                        		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
                        		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
                        		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
                        		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
                        		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
                        		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
                        		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
                        		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
                        		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
                        		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
                        		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
                        		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
                        		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
                        		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
                        		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
                        		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
                        		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
                        		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
                        		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
                        		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
                        		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
                        		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
                        		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
                        		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
                        		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
                        		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
                        		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
                        		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
                        		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
                        		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
                        		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
                        		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
                        		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
                        		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
                        		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
                        		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
                        		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
                        		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
                        		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
                        		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
                        		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
                        		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
                        		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
                        		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
                        		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
                        		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
                        		a=AddUnsigned(a,AA);
                        		b=AddUnsigned(b,BB);
                        		c=AddUnsigned(c,CC);
                        		d=AddUnsigned(d,DD);
                        	}

                        	var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

                        	return temp.toLowerCase();
                        }

                        var isWallboard = !!($(window.top.document.body).find('#wallboards').length);
                        if (isWallboard) {
                            $('body').addClass('wallboard');
                        }

                        function parseXml(xml) {
                            var data = {};
                            $('item', xml).each(function(idx, item) {
                                item = $(item);
                                var description = item.find('description').text();
                                var usersString = description.match(/<small>(.*)<\/small>/)[1],
                                    users = usersString.split(','),
                                    incompleteUsers = [];
                                for (var i = 0, len = users.length; i < len; i++) {
                                    var user = users[i].replace(/&nbsp;/ig, '').replace(/\./g, '');
                                    if (user.indexOf('<') == -1) {
                                        incompleteUsers.push(user);
                                    }
                                }
                                var numIncomplete = incompleteUsers.length,
                                    isBlocking = (numIncomplete == 1),
                                    weight = 1 + (1 / numIncomplete);
                                for (var i = 0; i < numIncomplete; i++) {
                                    var user = incompleteUsers[i];
                                    data[user] = data[user] || {
                                        name: user,
                                        weight: 0,
                                        incomplete: 0,
                                        blocking: 0
                                    };
                                    data[user].weight += weight;
                                    data[user].incomplete++;
                                    isBlocking && data[user].blocking++;
                                }
                            });
                            return data;
                        }

                        function sortByDescWeighting(a, b) {
                            return b.weight - a.weight;
                        }


                        function convertToArray(users) {
                            var arr = [];
                            $.each(users, function(idx, userObj) {
                                arr.push(userObj);
                            });
                            return arr;
                        }

                        function getGravatarHash(username) {
                            username = username.trim().toLowerCase() + '@atlassian.com';
                            return MD5(username);
                        }

                        function getGravatarUrl(username, s) {
                            var hash = getGravatarHash(username),
                                url = 'https://secure.gravatar.com/avatar/' + hash;
                            return s ? url + '?s=' + s : url;
                        }

                        function buildUserAvatarElement(username, name) {
                            var avatarSize = isWallboard ? 100 : 60;
                            // get gravatar
                            return $('<img src="" alt="" class="user-avatar">')
                                        .attr('alt', name)
                                        .attr('title', name)
                                        .attr('src', getGravatarUrl(username, avatarSize));
                        }

                        function buildUserNameElement(name) {
                            return $('<h2 class="user-name"></h2>')
                                        .text(name);
                        }

                        function buildReviewCountElement(count, singular, plural, classname) {
                            var isSingular = count == 1,
                                text = isSingular ? singular : plural,
                                el = $('<span class="reviews-count"></span>');
                            el.text(text.replace(/\{0\}/g, count));
                            if (classname) {
                                el.addClass(classname);
                            }
                            if (isSingular) {
                                el.addClass('singular');
                            }
                            if (count === 0) {
                                el.addClass('zero-count');
                            }
                            return el;

                        }

                        function buildUserInfoElement(incomplete, blocking) {
                            var el = $('<div class="user-info"></div>');
                            buildReviewCountElement(incomplete, '{0} review incomplete', ' {0} reviews incomplete', 'reviews-incomplete').appendTo(el);
                            buildReviewCountElement(blocking, '{0} review blocked', ' {0} reviews blocked', 'reviews-blocking').appendTo(el);
                            return el;
                        }

                        function buildUserElement(user) {
                            var el = $('<div class="user"></div>'),
                                name = user.name
                                username = name.split(' ');
                            username = username[0].substring(0, 1) + username[username.length - 1];
                            buildUserAvatarElement(username, name).appendTo(el);
                            buildUserNameElement(name).appendTo(el);
                            buildUserInfoElement(user.incomplete, user.blocking).appendTo(el);
                            return el;
                        }
                        
                        function buildNoMatchingUsersElement() {
                            return $('<div class="no-matching-users"></div>')
                                .html('Congratulations.<br>You have arrived at the chopper.')
                        }

                        function buildDomElements(users, num, threshold) {
                            var container = $('<div class="users-container"></div>'),
                                usersAboveThreshold = 0;
                            threshold = threshold || 0;
                            num = (num && num < users.length) ? num : users.length;
                            for (var i = 0; i < num; i++) {
                                var user = users[i];
                                if (user.weight > threshold) {
                                    buildUserElement(user).appendTo(container);
                                    usersAboveThreshold++;
                                }
                            }
                            if (!usersAboveThreshold) {
                                buildNoMatchingUsersElement().appendTo(container);
                            }
                            return container;
                        }
                        
                        function collateUserData(dataArray) {
                            var data = {};
                            for (var i = 0, len = dataArray.length; i < len; i++) {
                                var userData = dataArray[i];
                                for (user in userData) {
                                    if (!data[user]) {
                                        data[user] = userData[user];
                                    } else {
                                        data[user].weight += userData[user].weight;
                                        data[user].incomplete += userData[user].incomplete;
                                        data[user].blocking = data[user].blocking ? data[user].blocking + userData[user].blocking : userData[user].blocking;
                                    }
                                }
                            }
                            return data;
                        }

                        $(function() {
                            var projects = ['CR-STRM', 'CR-UPM', 'CR-FASTDEV'],
                                // limit to three, because wallboards suck
                                numToShow = 3,
                                // minimum "weight" a user must have to be displayed
                                threshold = 3,
                                userDataArray = [];
                                
                            for (var i = 0, projectCount = projects.length; i < projectCount; i++) {
                                var project = projects[i];
                        
                                $.ajax({
                                    type: 'get',
                                    url: 'https://studio.atlassian.com/source/cru/rssReviewFilter',
                                    dataType: 'xml',
                                    data: {
                                        state: 'Review',
                                        orRoles: 'false',
                                        complete: 'false',
                                        project: project,
                                        filter: 'custom'
                                    },
                                    success: function(xml) {
                                        var userData = parseXml(xml);
                                    
                                        userDataArray.push(userData);
                                        if (userDataArray.length === projectCount) {
                                            userData = collateUserData(userDataArray);
                                            userArr = convertToArray(userData);
                                            userArr.sort(sortByDescWeighting);
                                            buildDomElements(userArr, numToShow, threshold).appendTo($('body'));
                                        }
                                    },
                                    error: function(jqXHR, textStatus, errorThrown) {
                                        console.log('Error while loading reviews for ' + project + ' (' + textStatus + '): ', errorThrown);
                                    }
                                });
                            }
                        });

                     })();
                  </script>
        ]]>
    </Content>
</Module>
